openapi: 3.0.3
info:
  title: EnergeX Assessment API
  version: 1.0.0
  description: |
    Combined API surface:
    - **Lumen (PHP)** for auth and posts CRUD (subset).
    - **Node.js** cache layer for fast, read-only reads via Redis (GraphQL).

    Notes
    - JWT issued by Lumen on register/login.
    - `/api/posts` and `/api/posts/{id}` are **JWT-protected**.
    - Cache behavior:
      - Lumen: `GET /api/posts` and `GET /api/posts/{id}` are cached in Redis.
      - GraphQL: `GET /cache/posts` and `GET /cache/posts/{id}` read from Redis first (then DB).

tags:
  - name: Auth
  - name: Posts
  - name: Cache (GraphQL)

paths:
  /api/register:
    post:
      tags: [Auth]
      summary: Register a new user
      description: Creates a user in MySQL and returns a JWT from Lumen.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              default:
                value: { name: "Alice", email: "alice@example.com", password: "secret123" }
      responses:
        '201':
          description: Created; returns token and user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '422':
          description: Validation error
        '409':
          description: Email already registered
  /api/login:
    post:
      tags: [Auth]
      summary: Login and obtain JWT
      description: Verifies credentials and returns a JWT from Lumen.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              default:
                value: { email: "alice@example.com", password: "secret123" }
      responses:
        '200':
          description: OK; returns token and user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
  /api/posts:
    get:
      tags: [Posts]
      summary: Fetch all posts (cached in Redis)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Post' }
    post:
      tags: [Posts]
      summary: Create a post
      description: Creates a post for the authenticated user. Also invalidates related Redis keys.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
            examples:
              default:
                value: { title: "First post", content: "Hello Lumen + JWT" }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '422':
          description: Validation error
        '401':
          description: Unauthorized
  /api/posts/{id}:
    get:
      tags: [Posts]
      summary: Fetch a single post (cached in Redis)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: Post found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Not found
        '401':
          description: Unauthorized

  /cache/posts:
    get:
      tags: [Cache (GraphQL)]
      summary: Fetch cached posts (global)
      description: |
        Node.js cache layer.
        Returns posts from Redis if present, otherwise queries MySQL and writes to Redis.
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Post' }
  /cache/posts/{id}:
    get:
      tags: [Cache (GraphQL)]
      summary: Fetch single post via Redis-first
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, minimum: 1 }
      responses:
        '200':
          description: Post found (Redis hit or DB fallback)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterRequest:
      type: object
      required: [name, email, password]
      properties:
        name: { type: string, example: Alice }
        email: { type: string, format: email, example: alice@example.com }
        password: { type: string, format: password, minLength: 6, example: secret123 }
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }
    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          description: JWT signed by Lumen
    CreatePostRequest:
      type: object
      required: [title]
      properties:
        title: { type: string }
        content: { type: string, nullable: true }
    User:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: Alice }
        email: { type: string, format: email, example: alice@example.com }
    Post:
      type: object
      properties:
        id:        { type: integer, example: 42 }
        title:     { type: string, example: "First post" }
        content:   { type: string, nullable: true, example: "Hello Lumen + JWT" }
        user_id:   { type: integer, example: 1 }
        created_at: { type: string, nullable: true, example: "2025-08-31 19:25:00" }